<?php
declare(strict_types=1);

namespace Solodkiy\SmartSeleniumDriver;

use Facebook\WebDriver\Exception\NoSuchElementException;
use Facebook\WebDriver\Exception\TimeOutException;
use Facebook\WebDriver\Exception\WebDriverException;
use Facebook\WebDriver\Remote\DesiredCapabilities;
use Facebook\WebDriver\Remote\RemoteWebDriver;
use Facebook\WebDriver\WebDriverBy;
use Solodkiy\SmartSeleniumDriver\Exceptions\SmartSeleniumCommandError;

class SmartSeleniumDriver extends RemoteWebDriver
{
    private const DOWNLOADING_EXT = '.crdownload';
    /**
     * @param string $selenium_server_url
     * @param null $desired_capabilities
     * @param null $connection_timeout_in_ms
     * @param null $request_timeout_in_ms
     * @param null $http_proxy
     * @param null $http_proxy_port
     * @param DesiredCapabilities|null $required_capabilities
     * @return SmartSeleniumDriver
     */
    public static function create(
        $selenium_server_url = 'http://localhost:4444/wd/hub',
        $desired_capabilities = null,
        $connection_timeout_in_ms = null,
        $request_timeout_in_ms = null,
        $http_proxy = null,
        $http_proxy_port = null,
        DesiredCapabilities $required_capabilities = null
    ) {
        $driver = parent::create($selenium_server_url, $desired_capabilities, $connection_timeout_in_ms, $request_timeout_in_ms, $http_proxy, $http_proxy_port, $required_capabilities); // TODO: Change the autogenerated stub
        /** @var $driver $this */
        $driver->checkSmartSeleniumVersion();
        return $driver;
    }

    /**
     * @throws SmartSeleniumCommandError
     */
    public function clearDownloadDir()
    {
        $this->executeSmartCommand('clear');
    }

    /**
     * @return array
     * @throws SmartSeleniumCommandError
     */
    public function getDownloadedFiles(): array
    {
        return json_decode($this->executeSmartCommand('get_names'), true);
    }

    /**
     * @param string $fileName
     * @param int $timeout_in_second
     * @return string
     * @throws SmartSeleniumCommandError
     * @throws TimeOutException
     */
    public function getDownloadedFileByName(string $fileName, int $timeout_in_second = 30): string
    {
        $fileName = $this->removeDownloadingExt($fileName);

        $this->waitForDownload($fileName, $timeout_in_second);

        $data = json_decode($this->executeSmartCommand('get_by_name', ['name' => $fileName]), true);
        return base64_decode($data['content']);
    }

    /**
     * @param string $fileName
     * @param int $timeout_in_second
     * @throws SmartSeleniumCommandError
     * @throws TimeOutException
     */
    private function waitForDownload(string $fileName, int $timeout_in_second = 30) : void
    {
        $end = microtime(true) + $timeout_in_second;
        while ($end > microtime(true)) {
            $files = $this->getDownloadedFiles();
            if (array_search($fileName . self::DOWNLOADING_EXT, $files) === false) {
                return;
            }
            usleep(100 * 1000); // 100 ms
        }
        throw new TimeOutException('Timeout during wait download file "' . $fileName . '"');
    }

    private function removeDownloadingExt(string $name): string
    {
        return preg_replace('/' . preg_quote(self::DOWNLOADING_EXT, '/').'$/', '', $name);
    }

    /**
     * @throws WebDriverException
     */
    private function checkSmartSeleniumVersion(): void
    {
        try {
            $version = $this->executeSmartCommand('version');
            $isVersionCorrect = version_compare($version, '0.2.0', '>=') && version_compare($version, '0.3.0', '<');
            if (!$isVersionCorrect) {
                throw new WebDriverException('Unsupported version of smart selenium. Expected: 0.2.*, got: '. $version);
            }
        } catch (SmartSeleniumCommandError $e) {
            throw new WebDriverException('This selenium not smart enough. You can get one there: https://github.com/Solodkiy/smart-selenium');
        }
    }

    /**
     * @param string $command
     * @param array $params
     * @return string
     * @throws SmartSeleniumCommandError
     */
    private function executeSmartCommand(string $command, array $params = []) : string
    {
        $this->openSecondTab();

        $this->switchTo()->window($this->getWindowHandles()[1]);

        $this->get('http://localhost:8080/cmd.php?cmd='.urlencode($command) .'&' . http_build_query($params));
        try {
            $status = $this->findElement(WebDriverBy::id('status'))->getAttribute('innerHTML');
            $content = $this->findElement(WebDriverBy::id('content'))->getAttribute('innerHTML');
        } catch (NoSuchElementException $e) {
            throw new SmartSeleniumCommandError('Command ' . $command . ' error: Cannot parse result');
        }

        if ($status !== 'success') {
            throw new SmartSeleniumCommandError('Command ' . $command . ' error: '. $content);
        }

        $this->switchTo()->window($this->getWindowHandles()[0]);

        return $content;
    }

    private function openSecondTab()
    {
        if (count($this->getWindowHandles()) === 1) {
            $this->executeScript('window.open("parent");');
        }
    }
}
